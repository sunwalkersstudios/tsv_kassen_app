rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function userDoc(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }

    function userRole() {
      return isSignedIn() ? userDoc(request.auth.uid).data.role : null;
    }

    function isAdmin() {
      return userRole() == 'admin';
    }

    function isServer() {
      return userRole() == 'server';
    }

    function isKitchen() {
      return userRole() == 'kitchen';
    }

    function isBar() {
      return userRole() == 'bar';
    }

    // Users: allow a user to read/write their own profile; admin can read all
    match /users/{uid} {
      allow read: if isSignedIn() && (uid == request.auth.uid || isAdmin());
      allow write: if isSignedIn() && (uid == request.auth.uid || isAdmin());
    }

    // Menu: readable by signed-in users; writable only by admin
    match /menu/{doc} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Tables: readable by signed-in users; writable only by admin
    match /tables/{doc} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Events: readable by signed-in users; writable only by admin
    match /events/{doc} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Tickets: readable by signed-in users; writes restricted by role and operation
    match /tickets/{ticketId} {
      allow read: if isSignedIn();
      // Create only by server/admin; if server, serverId must match creator
      allow create: if isSignedIn() && (
        (isServer() && request.resource.data.serverId == request.auth.uid) || isAdmin()
      );
      // Update tickets only by server/admin; tickets marked paid are immutable; serverId cannot change; status must be valid
      allow update: if isSignedIn() && (isServer() || isAdmin())
        && resource.data.status != 'paid'
        && request.resource.data.serverId == resource.data.serverId
        && request.resource.data.status in ['open','sentToKitchen','ready','served','paid'];
      // Delete tickets admin-only
      allow delete: if isAdmin();

      // Items subcollection under a ticket
      match /items/{itemId} {
        allow read: if isSignedIn();
        // Servers/Admin can manage items fully
        allow create, update, delete: if isSignedIn() && (isServer() || isAdmin());
        // Kitchen can only update items for route == 'kitchen' and only set status to 'ready' (and touch updatedAt)
        allow update: if isSignedIn() && isKitchen() &&
          request.resource.data.route == 'kitchen' &&
          resource.data.route == 'kitchen' &&
          request.resource.data.status == 'ready' &&
          (resource.data.status == 'open' || resource.data.status == 'sentToKitchen');
        // Bar can only update items for route == 'bar' and only set status to 'ready'
        allow update: if isSignedIn() && isBar() &&
          request.resource.data.route == 'bar' &&
          resource.data.route == 'bar' &&
          request.resource.data.status == 'ready' &&
          (resource.data.status == 'open' || resource.data.status == 'sentToKitchen');
      }
    }

    // Sales: readable by signed-in users (for receipts/cashier); writes by server/admin with basic validation
    match /sales/{saleId} {
      allow read: if isSignedIn();
      // Sales are append-only; no updates after creation
      allow create: if isSignedIn() && (isServer() || isAdmin())
        && request.resource.data.paymentMethod in ['cash', 'card']
        && request.resource.data.total is number
        && request.resource.data.day is string;
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}
